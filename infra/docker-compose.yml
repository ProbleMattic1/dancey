services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment: { ALLOW_ANONYMOUS_LOGIN: 'yes' }
    ports: [ '2181:2181' ]
  kafka:
    image: bitnami/kafka:3.7
    ports: [ '9092:9092' ]
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    depends_on: [ zookeeper ]
  postgres:
    image: postgres:16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: danceapp
    ports: [ '5432:5432' ]
    volumes: [ 'pgdata:/var/lib/postgresql/data' ]
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports: [ '9000:9000', '9001:9001' ]
    volumes: [ 'minio:/data' ]
  createbucket:
    image: minio/mc
    depends_on: [ minio ]
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 minioadmin minioadmin &&
      mc mb --ignore-existing local/bucket &&
      mc anonymous set public local/bucket
      "
volumes:
  pgdata: {}
  minio: {}


  redis:
    image: redis:7-alpine
    ports: [ "6379:6379" ]

  celery:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      DB_DSN: postgresql://postgres:postgres@postgres:5432/danceapp
      KAFKA_BOOT: kafka:9092
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: bucket
      # Optional webhooks:
      # SLACK_WEBHOOK_URL: https://hooks.slack.com/services/XXX/YYY/ZZZ
      # DISCORD_WEBHOOK_URL: https://discord.com/api/webhooks/XXX/YYY
      USE_CELERY: "1"
    command: bash -lc "celery -A backend.tasks.celery_app.celery worker -Q default --loglevel=INFO"
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
